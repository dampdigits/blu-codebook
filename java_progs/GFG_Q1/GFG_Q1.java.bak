/*		
		Program finds the minimum no. of contiguous subarrays an array can be 
		divided into such that bitwise AND of any 2 elements in a subarray = 0
		
		eg. {1,2,3,4} -> {1,2}, {3,4} since 1&2 = 0 and 3&4=0. Ans=2
		eg. {1,2,3,4,8} -> {1,2}, {3,4,8} Ans= 2 subarrays
*/

import java.util.*;
import java.lang.*;

public class GFG_Q1
{
	public static int calc(int A[],int N)
	{
		int count=0;
		for(int k=0; k<N-1; k++)
		{
			if((A[k] & A[k+1]) == 0)	//if adjacent elements from left to right gives 0
			for(int l=k; l>-1; l--)
			{
				if((A[k+1] & A[l]) != 0)//then check if the element on right gives 0 with previous elements
				{	
					count++;			//if not then it means the traversed elements complete a subarray
					break;
				}
			}
			else			//if adjacent elements from left to right dont give zero
				count++;	//that means the traversed elements complete a subarray
		}
		return count;
	}
	public static void main(String[] args)
	{
		//code
		Scanner sc=new Scanner(System.in);
		
		int T=sc.nextInt();		//T-> test cases
		if(T>=1 && T<=10000)	//checking 1<= T <= 10000
			
			for(int i=1; i<=T; i++)		//loop for each test case
			{
				int N=sc.nextInt();		//N-> No. of elements in array
				if(N>=1 && N<=100000)	//checking 1<= N <= 100000
				{
					int flag=1, count=0, A[]=new int[N];
					
					System.out.println("Enter elements separated by single blank space");
					for(int j=0; j<N; j++)		//taking elements
						A[j]=sc.nextInt();
					
					for(int j=0; j<N; j++)		//traversing array elements to check range
						if(A[j]<1 || A[j]>1000000000)	//range: 1 <= element <= 1000000000
						{
							flag=0; 	//element not in range
							break;
						}
					if(flag==1)		//if elementsin range
					{
						count=calc(A,N);
					}
					else
						break;
					System.out.println(count+1); //+1 bcz last element marks the closure of a subarray
				}
			}
		
	}
} //check eg. {1,2,3,4,8,5,10,6} answer should be 4